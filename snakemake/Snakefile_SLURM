import os

def find_laz_files(path):
    laz_files = [file.rsplit(".laz")[0] for file in os.listdir(path) if file.endswith(".laz")]
    return laz_files

def generate_target_files(base_path, files):
    target_files = []
    for file in files:
        filename = file + ".out"
        target = os.path.join(base_path, "output", file, filename)
        target_files.append(target)
    return target_files

base_path = os.environ.get("BASE_PATH")
laz_files = find_laz_files(base_path)
target_files = generate_target_files(base_path, laz_files)

rule all:
    input:
        expand("{target}", target=target_files)

rule add_parameters_and_normalize:
    input:
        expand("{base_path}/{{base_name}}.laz", base_path=base_path)
    output:
        expand("{base_path}/output/{{base_name}}_normalized.las", base_path=base_path)
    resources:
        runtime = 5, # minutes
        cpus_per_task = 1,
        mem_mb = 20000,
    script:
        "../workflow/01/01_add_parameters_and_normalize.py"

rule georeference:
    input:
        rules.add_parameters_and_normalize.output
    output:
        expand("{base_path}/output/{{base_name}}_georef.las", base_path=base_path)
    resources:
        runtime = 5, # minutes
        cpus_per_task = 1,
        mem_mb = 20000,
    script:
        "../workflow/02/02_georeference.py"

rule spatial_resample:
    input:
        rules.georeference.output
    output:
        expand("{base_path}/output/{{base_name}}_resampled.las", base_path=base_path)
    resources:
        runtime = 5, # minutes
        cpus_per_task = 1,
        mem_mb = 20000,
    script:
        "../workflow/03/03_spatial_resample.py"

rule clipping_trees:
    input:
        rules.georeference.output
    output:
        directory(expand("{base_path}/output/{{base_name}}/single_trees/", base_path=base_path))
    resources:
        runtime = 5, # minutes
        cpus_per_task = 1,
        mem_mb = 20000,
    script:
        "../workflow/04/04_clipping_trees.py"

rule normalize_to_ground:
    input:
        rules.clipping_trees.output
    output:
        directory(expand("{base_path}/output/{{base_name}}/single_trees_normalized_to_ground", base_path=base_path))
    resources:
        runtime = 5, # minutes
        cpus_per_task = 1,
        mem_mb = 20000,
    script:
        "../workflow/05/05_normalize_to_ground.py"

rule fine_segmentation:
    input:
        rules.normalize_to_ground.output
    output:
        output_dir = directory(expand("{base_path}/output/{{base_name}}/fine_segmentation", base_path=base_path)),
        output_dir_noise = directory(expand("{base_path}/output/{{base_name}}/fine_segmentation_noise", base_path=base_path))
    resources:
        runtime = 10, # minutes
        cpus_per_task = 1,
        mem_mb = 20000,
    script:
        "../workflow/06/06_fine_segmentation.py"

rule final:
    input:
        expand("{base_path}/output/{base_name}/fine_segmentation", base_path=base_path, base_name=laz_files)
    default_target: True
    resources:
        runtime = 1, # minutes
        cpus_per_task = 1,
        mem_mb = 2000,
